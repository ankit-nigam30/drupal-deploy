<?php

/**
 * @file
 * Deployment tests.
 */

/**
 * Tests the dependency framework in Deploy.
 */
class DeployDependencyTestCase extends DeployWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Dependency framework',
      'description' => 'Test the dependency framework in Deploy.',
      'group' => 'Deployment'
    );
  }

  function setUp() {
    parent::setUp(TRUE);
  }

  function testDependencies() {
    // Add the 'field_tags' field.
    $user = $this->drupalCreateUser();
    $term1 = $this->createTerm();
    $node1 = $this->drupalCreateNode(array(
      'type' => 'article',
      'uid' => $user->uid,
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $term1->tid))),
    ));
    $term2 = $this->createTerm();
    $node2 = $this->drupalCreateNode(array(
      'type' => 'article',
      'uid' => $user->uid,
      'tnid' => $node1->nid,
      'field_tags' => array(LANGUAGE_NONE => array(array('tid' => $term2->tid))),
    ));

    // Add only the last node to the collection. What should come out of the
    // iterator should be all it's dependencies, and last the node it self.
    $collection = array(
      'node' => array($node2->nid => TRUE),
    );

    $iterator = deploy_iterator($collection);
    $i = 0;
    foreach ($iterator as $entity_wrapper) {
      $test = FALSE;
      $entity = $entity_wrapper->value();
      $type = $entity_wrapper->type();
      $id = $entity_wrapper->getIdentifier();
      switch ($i) {
        case 0:
          $test = ($type == 'taxonomy_term' && $id == $term2->tid);
          break;
        case 1:
          $test = ($type == 'user' && $id == $user->uid);
          break;
        case 2:
          $test = ($type == 'taxonomy_term' && $id == $term1->tid);
          break;
        case 3:
          $test = ($type == 'user' && $id == $user->uid);
          break;
        case 4:
          $test = ($type == 'node' && $id == $node1->nid);
          break;
        case 5:
          $test = ($type == 'node' && $id == $node2->nid);
          break;
      }
      $placeholders = array('%type' => $type, '%id' => $id);
      $this->assertTrue($test, t('%type %id was iterated over, in correct order.', $placeholders));
      $this->assertTrue(uuid_is_valid($entity->uuid), t('%type %id was loaded with UUID.', $placeholders));
      $i++;
    }
    $this->assertEqual($i, 6, 'Correct number of entities was iterated over.');
  }
}

/**
 * Test a full deployment between two sites with the Views aggregator and the
 * Memory processor.
 */
class DeployViewsMemoryTestCase extends DeployWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Views, Memory',
      'description' => 'Test a full deployment between two sites with the Views aggregator and the Memory processor.',
      'group' => 'Deployment'
    );
  }

  function testDeployment() {
    // Views aggregator and Memory processor is the default for this plan.
    // No need to change.
    $this->deployRun('deploy_example_plan');
  }
}

/**
 * Test a full deployment between two sites with the Views aggregator and the
 * Queue processor.
 *
 * @todo
 *   This test is broken because $this->cronRun() doesn't work in this testing
 *   environment.
 *
class DeployViewsQueueTestCase extends DeployWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Views, Queue',
      'description' => 'Test a full deployment between two sites with the Views aggregator and the Queue processor.',
      'group' => 'Deployment'
    );
  }

  function testDeployment() {
    $this->editPlan('deploy_example_plan', array('processor_plugin' => 'DeployProcessorQueue'));
    $this->deployRun('deploy_example_plan');
  }
}
//*/

/**
 * Test a full deployment between two sites with the Views aggregator and the
 * Batch processor.
 *
 * @todo
 *   This test is broken because batch_process() can't use the necessary
 *   User-Agent headers needed to reach the separate environment.
 *
class DeployViewsBatchTestCase extends DeployWebTestCase {

  public static function getInfo() {
    return array(
      'name' => 'Views, Batch',
      'description' => 'Test a full deployment between two sites with the Views aggregator and the Batch processor.',
      'group' => 'Deployment'
    );
  }

  function testDeployment() {
    $this->editPlan('deploy_example_plan', array('processor_plugin' => 'DeployProcessorBatch'));
    $this->deployRun('deploy_example_plan');
  }
}
//*/
