<?php

/**
 * Include core implementations and Deploy's own implementations.
 *
 * @todo
 *   Do this properly with hook_hook_info().
 */
module_load_include('inc', 'deploy', 'deploy.manager');
module_load_include('inc', 'deploy', 'deploy.core');
module_load_include('inc', 'deploy', 'deploy.deploy');

/**
 * Deployment statuses.
 */
define('DEPLOY_STATUS_FAILED', 0);
define('DEPLOY_STATUS_STARTED', 1);
define('DEPLOY_STATUS_QUEUED', 2);
define('DEPLOY_STATUS_PROCESSING', 3);
define('DEPLOY_STATUS_DEPLOYED', 4);
define('DEPLOY_STATUS_PUBLISHED', 5);

/**
 * Implements hook_ctools_plugin_type().
 */
function deploy_ctools_plugin_type() {
  return array(
    'authenticators' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'services' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'aggregators' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'processors' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Get all aggregator plugins.
 */
function deploy_get_aggregator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'aggregators');
}

/**
 * Get one aggregator plugin.
 */
function deploy_get_aggregator_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'aggregators', $name);
}

/**
 * Get all processor plugins.
 */
function deploy_get_processor_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'processors');
}

/**
 * Get one processor plugin.
 */
function deploy_get_processor_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'processors', $name);
}

/**
 * Get all authenticator plugins.
 */
function deploy_get_authenticator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'authenticators');
}

/**
 * Get one authenticator plugin.
 */
function deploy_get_authenticator_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'authenticators', $name);
}

/**
 * Get all service plugins.
 */
function deploy_get_service_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'services');
}

/**
 * Get one service plugin.
 */
function deploy_get_service_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'services', $name);
}

/**
 * Object factory for a deployment plan.
 */
function deploy_plan_create($schema, $item) {
  $plan = new DeployPlan;
  // Unserialize our serialized params.
  foreach ($schema['fields'] as $field => $info) {
    if (!empty($info['serialize'])) {
      $plan->{$field} = unserialize($item->{$field});
    }
    else {
      $plan->{$field} = $item->{$field};
    }
  }
  return $plan;
}

/**
 * Loader callback for a deployment plan.
 */
function deploy_plan_load($name) {
  $plans = deploy_plan_load_all();
  if (isset($plans[$name])) {
    return $plans[$name];
  }
}

/**
 * Loader callback for all deployment plans.
 */
function deploy_plan_load_all($args = array()) {
  $type = !empty($args) ? 'conditions' : 'all';
  ctools_include('export');
  $plans = ctools_export_load_object('deploy_plans', $type, $args);
  if (isset($plans)) {
    // Load each plan's configuration into itself.
    foreach ($plans as &$plan) {
      $plan->load();
    }
    return $plans;
  }
}

/**
 * Options callback for the deploy_plan data type.
 */
function deploy_plan_get_options($args = array()) {
  $plans = deploy_plan_load_all($args);
  $options = array();
  foreach ($plans as $plan_name => $info) {
    $options[$plan_name] = $info->title;
  }
  return $options;
}

/**
 * Object factory for a deployment endpoint.
 */
function deploy_endpoint_create($schema, $item) {
  $endpoint = new DeployEndpoint;
  // Unserialize our serialized params.
  foreach ($schema['fields'] as $field => $info) {
    if (!empty($info['serialize'])) {
      $endpoint->{$field} = unserialize($item->{$field});
    }
    else {
      $endpoint->{$field} = $item->{$field};
    }
  }
  return $endpoint;
}

/**
 * Loader callback for a deployment endpoint.
 */
function deploy_endpoint_load($name) {
  $endpoints = deploy_endpoint_load_all();
  if (isset($endpoints[$name])) {
    return $endpoints[$name];
  }
}

/**
 * Loader callback for a deployment endpoint.
 */
function deploy_endpoint_load_all() {
  ctools_include('export');
  $endpoints = ctools_export_load_object('deploy_endpoints', 'all');
  if (isset($endpoints)) {
    return $endpoints;
  }
}

/**
 * Constructs a deployment iterator, which is the core of the dependency
 * framework.
 */
function deploy_iterator($collection) {
  $iterator = new DeployIterator($collection);
  return new DeployIteratorIterator($iterator);
}

/**
 * Implements hook_cron_queue_info().
 */
function deploy_cron_queue_info() {
  return array(
    'deploy_deploy' => array(
      'worker callback' => 'deploy_queue_worker_deploy',
      'time' => 60,
    ),
    'deploy_publish' => array(
      'worker callback' => 'deploy_queue_worker_publish',
      'time' => 60,
    ),
  );
}

/**
 * Processes a single queued item for deployment.
 */
function deploy_queue_deploy_worker($item) {
  $endpoint = deploy_endpoint_load($item['endpoint_name']);
  $plan = deploy_plan_load($item['plan_name']);

  if ($plan && $endpoint) {
    $collection = array($item['entity_type'] => array($item['entity_id'] => TRUE));
    $iterator = deploy_iterator($collection);
    $endpoint->deploy($plan, $iterator);
  }
}

/**
 * Helper function to add deployment dependencies.
 *
 * We never treat user UID 0 or 1 as dependencies. Those are low level user
 * accounts ("anonymous" and "root") that already exists in most endpoint
 * systems (i.e. when the endpoint happens to be another Drupal site).
 *
 * @param $dependencies
 *   The dependency array.
 * @param $objects
 *   Array of objects that should be checked for dependencies in $properties.
 * @param $entity_type
 *   The type of entity that $properties will add dependency on.
 * @param $properties
 *   An array of properties that adds dependencies to $objects. All properties
 *   must only point to one entity type at the time.
 */
function deploy_add_dependencies(&$dependencies, $objects, $entity_type, $properties) {
  if (!is_array($objects)) {
    $objects = array($objects);
  }
  if (!is_array($properties)) {
    $properties = array($properties);
  }

  foreach ($objects as $object) {
    foreach ($properties as $property) {
      $value = NULL;
      if (is_object($object) && isset($object->{$property})) {
        $value = $object->{$property};
      }
      elseif (is_array($object) && isset($object[$property])) {
        $value = $object[$property];
      }
      if (!empty($value) && !($entity_type == 'user' && ((int)$value == 0 || (int)$value == 1))) {
        if (!isset($dependencies[$entity_type])) {
          $dependencies[$entity_type] = array();
        }
        $dependencies[$entity_type][$value] = TRUE;
      }
    }
  }
}

/**
 * Helper function to retrieve relevant information about a deployment status.
 */
function deploy_deployment_status($status = NULL, $key = NULL) {
  $info = array(
    DEPLOY_STATUS_FAILED => array(
      'title' => t('Failed'),
    ),
    DEPLOY_STATUS_STARTED => array(
      'title' => t('Started'),
    ),
    DEPLOY_STATUS_QUEUED => array(
      'title' => t('Queued'),
    ),
    DEPLOY_STATUS_PROCESSING => array(
      'title' => t('Processing'),
    ),
    DEPLOY_STATUS_DEPLOYED => array(
      'title' => t('Deployed'),
    ),
    DEPLOY_STATUS_PUBLISHED => array(
      'title' => t('Published'),
    ),
  );
  if ($status === NULL && $key === NULL) {
    return $info;
  }
  elseif ($status !== NULL && $key === NULL) {
    if (isset($info[$status])) {
      return $info[$status];
    }
  }
  elseif ($status !== NULL && $key !== NULL) {
    if (isset($info[$status][$key])) {
      return $info[$status][$key];
    }
  }
  return FALSE;
}

/**
 * Helper function to log deployments.
 */
function deploy_deployment_log($key, $status, $plan_name = NULL, $timestamp = NULL) {
  if ($timestamp === NULL) {
    $timestamp = time();
  }
  if ($key === NULL) {
    // TODO: Add new log entry.
  }
  else {
    // TODO: Update log entry.
  }
}
