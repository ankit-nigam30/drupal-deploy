<?php

/**
 * Implementation of hook_ctools_plugin_type().
 *
 * @todo
 *   Find out if we really need 'use hooks'.
 */
function deploy_ctools_plugin_type() {
  return array(
    'authentications' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'services' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'aggregators' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
    'processors' => array(
      'cache' => TRUE,
      'use hooks' => TRUE,
      'classes' => array('handler'),
    ),
  );
}

/**
 * Implementation of hook_deploy_processors().
 */
function deploy_deploy_processors() {
  $path = drupal_get_path('module', 'deploy') . '/plugins';
  return array(
    'DeployProcessorQueue' => array(
      'name' => 'Queue API',
      'description' => 'Adds all resources for deployment to the Queue API. Works best with larger deployments where deployment speed is not critical.',
      'handler' => array(
        'class' => 'DeployProcessorQueue',
        'file' => 'DeployProcessorQueue.inc',
        'path' => $path,
      ),
    ),
    'DeployProcessorMemory' => array(
      'name' => 'Memory processor',
      'description' => 'A simple processor that deploys all resources to all endpoints in memory. Works best when triggered from Drush.',
      'handler' => array(
        'class' => 'DeployProcessorMemory',
        'file' => 'DeployProcessorMemory.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * Implementation of hook_deploy_authentications().
 */
function deploy_deploy_authentications() {
  $path = drupal_get_path('module', 'deploy') . '/plugins';
  return array(
    'DeployAuthenticationNone' => array(
      'name' => 'No authentication',
      'description' => "Doesn't perform any form of authentication at all.",
      'handler' => array(
        'class' => 'DeployAuthenticationNone',
        'file' => 'DeployAuthenticationNone.inc',
        'path' => $path,
      ),
    ),
    'DeployAuthenticationBasic' => array(
      'name' => 'Basic HTTP',
      'description' => 'Performs basic HTTP authentication on the endpoint.',
      'handler' => array(
        'class' => 'DeployAuthenticationBasic',
        'file' => 'DeployAuthenticationBasic.inc',
        'path' => $path,
      ),
    ),
    'DeployAuthenticationOAuth' => array(
      'name' => 'oAuth',
      'description' => 'Uses the oAuth protocol to authenticate with the endpoint.',
      'handler' => array(
        'class' => 'DeployAuthenticationOAuth',
        'file' => 'DeployAuthenticationOAuth.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * Implementation of hook_deploy_services().
 */
function deploy_deploy_services() {
  $path = drupal_get_path('module', 'deploy') . '/plugins';
  return array(
    'DeployServiceRestJSON' => array(
      'name' => 'REST JSON',
      'description' => 'Defines a REST service that can receive JSON data.',
      'handler' => array(
        'class' => 'DeployServiceRestJSON',
        'file' => 'DeployServiceRestJSON.inc',
        'path' => $path,
      ),
    ),
    'DeployServiceRestXML' => array(
      'name' => 'REST XML',
      'description' => 'Defines a REST service that can receive XML data.',
      'handler' => array(
        'class' => 'DeployServiceRestXML',
        'file' => 'DeployServiceRestXML.inc',
        'path' => $path,
      ),
    ),
  );
}

/**
 * Get all aggregator plugins.
 */
function deploy_get_aggregator_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'aggregators');
}

/**
 * Get one aggregator plugin.
 */
function deploy_get_aggregator_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'aggregators', $name);
}

/**
 * Get all processor plugins.
 */
function deploy_get_processor_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'processors');
}

/**
 * Get one processor plugin.
 */
function deploy_get_processor_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'processors', $name);
}

/**
 * Get all authentication plugins.
 */
function deploy_get_authentication_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'authentications');
}

/**
 * Get one authentication plugin.
 */
function deploy_get_authentication_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'authentications', $name);
}

/**
 * Get all service plugins.
 */
function deploy_get_service_plugins() {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'services');
}

/**
 * Get one service plugin.
 */
function deploy_get_service_plugin($name) {
  ctools_include('plugins');
  return ctools_get_plugins('deploy', 'services', $name);
}

/**
 * Object factory for a deployment plan.
 */
function deploy_plan_create($schema, $item) {
  // TODO: Read $schema instead to find out what fields that are serialized.
  foreach (array('aggregator_config', 'processor_config', 'endpoints') as $serialized_param) {
    if (!is_array($item->{$serialized_param})) {
      $item->{$serialized_param} = unserialize($item->{$serialized_param});
    }
  }

  $aggregator = new $item->aggregator_plugin((array)$item->aggregator_config);
  $processor = new $item->processor_plugin($aggregator, (array)$item->processor_config);

  $plan = new DeployPlan($processor);
  foreach ($item as $key => $value) {
    $plan->{$key} = $value;
  }

  return $plan;
}

/**
 * Loader callback for a deployment plan.
 */
function deploy_plan_load($name) {
  $result = deploy_plan_load_all();
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Loader callback for all deployment plans.
 */
function deploy_plan_load_all() {
  ctools_include('export');
  $result = ctools_export_load_object('deploy_plans', 'all');
  if (isset($result)) {
    return $result;
  }
}

/**
 * Object factory for a deployment endpoint.
 */
function deploy_endpoint_create($schema, $item) {
  // TODO: Read $schema instead to find out what fields that are serialized.
  foreach (array('authentication_config', 'service_config') as $serialized_param) {
    if (!is_array($item->{$serialized_param})) {
      $item->{$serialized_param} = unserialize($item->{$serialized_param});
    }
  }

  $service = new $item->service_plugin((array)$item->service_config);
  $authentication = new $item->authentication_plugin($service, (array)$item->authentication_config);
  $endpoint = new DeployEndpoint($authentication);

  foreach ($item as $key => $value) {
    $endpoint->{$key} = $value;
  }
  return $endpoint;
}

/**
 * Loader callback for a deployment endpoint.
 */
function deploy_endpoint_load($name) {
  $result = deploy_endpoint_load_all();
  if (isset($result[$name])) {
    return $result[$name];
  }
}

/**
 * Loader callback for a deployment endpoint.
 */
function deploy_endpoint_load_all() {
  ctools_include('export');
  $result = ctools_export_load_object('deploy_endpoints', 'all');
  if (isset($result)) {
    return $result;
  }
}
